# apiVersion: v1
# kind: Pod
# metadata:
#   name: simple-nginx-pod
# spec:
#   containers:
#     - name: nginx
#       image: nginx:1.14.2
#       ports:
#         - containerPort: 80
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: storage-volume
# spec:
#   # initContainers:
#   #   - name: init-image
#   #     image: rkalluru/learnk8s:init-container-html-generator
#   #     volumeMounts:
#   #       - name: empty
#   #         mountPath: /mnt/html
#   containers:
#     - name: side-car-container
#       image: rkalluru/learnk8s:side-car-html-generator
#       volumeMounts:
#         - name: empty
#           mountPath: /mnt/html
#     - name: nginx
#       image: nginx:1.14.2
#       volumeMounts:
#         - name: empty
#           mountPath: /usr/share/nginx/html
#   volumes:
#     - name: empty
#       emptyDir: {}

# apiVersion: apps/v1
# kind: ReplicaSet
# metadata:
#   name: replicaset-example
#   labels:
#     app: nginx
#     project: example
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#         - name: nginx
#           image: nginx

# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: config-map1
# data:
#   player-lives: "3"
#   ui_filename: "user-interface"
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: config-map-pod
# spec:
#   containers:
#     - name: config-container
#       image: nginx:1.14.2
#       env:
#         - name: player-lives
#           valueFrom:
#             configMapKeyRef:
#               name: config-map1
#               key: player-lives
#         - name: ui_filename
#           valueFrom:
#             configMapKeyRef:
#               name: config-map1
#               key: ui_filename

# # sending all the config map values at a same time
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: config-map-2
# spec:
#   containers:
#     - name: config-container-2
#       image: nginx:1.14
#       envFrom:
#         - configMapRef:
#             name: config-map1

# here we are creating a conf map with the actual file that are not key - value pairs
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  data:
    conf: |
      user nginx;
      worker_processes auto;
      error_log /var/log/nginx/error.log notice;
      pid /run/nginx.pid;

      include /usr/share/nginx/modules/*.conf;

      events {
      worker_connections 1024;
      }

      http {
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;

      sendfile            on;
      tcp_nopush          on;
      keepalive_timeout   65;
      types_hash_max_size 4096;

      include             /etc/nginx/mime.types;
      default_type        application/octet-stream;

      include /etc/nginx/conf.d/*.conf;

      server {
      listen       80;
      listen       [::]:80;
      server_name  _;
      root         /usr/share/nginx/html;

      include /etc/nginx/default.d/*.conf;

      error_page 404 /404.html;
      location = /404.html {
      }

      error_page 500 502 503 504 /50x.html;
      location = /50x.html {
      }

      location /images/ {
      expires 5s;
      root   /usr/share/nginx/html;
      try_files $uri /images/placeholder.jpg;
      }

      location /api/catalogue/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-{{env}}/data/frontend:CATALOGUE_URL token={{ token }} url=http://vault-internal.sdevops.shop:8200')| regex_replace('/$', '') }} }
      location /api/user/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-{{env}}/data/frontend:USER_URL token={{ token }} url=http://vault-internal.sdevops.shop:8200')| regex_replace('/$', '') }} }
      location /api/cart/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-{{env}}/data/frontend:CART_URL token={{ token }} url=http://vault-internal.sdevops.shop:8200') | regex_replace('/$', '')}} }
      location /api/shipping/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-{{env}}/data/frontend:SHIPPING_URL token={{ token }} url=http://vault-internal.sdevops.shop:8200')| regex_replace('/$', '') }} }
      location /api/payment/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-{{env}}/data/frontend:PAYMENT_URL token={{ token }} url=http://vault-internal.sdevops.shop:8200')| regex_replace('/$', '') }} }

      location /health {
      stub_status on;
      access_log off;
      }

      }
      }
---
apiVersion: v1
kind: Pod
metadata:
  name: conf-map-container
spec:
  containers:
    - name: conf-map-container
      volumeMounts:
        name: config-mount
        mountPath: /etc/nginx
  volumes:
    name: nginx-conf
    configMap:
      name: nginx-conf
  restartPolicy: never
